[
   {
      "student_id" : "14511",
      "transfer_description" : "CS38 – Introduction to Algorithms\r\nProf. Alexei Kitaev\r\n",
      "advisor_id" : "1176",
      "s_school" : "Caltech",
      "transcript" : "",
      "s_alias" : "seanseolwoong.choi",
      "state" : "processed",
      "s_last" : "Choi",
      "a_alias" : "winograd",
      "transfer_textbooks" : "[CLRS] (required): Introduction to Algorithms, 3rd Ed., Cormen, Leiserson, Rivest, Stein (The MIT Press, 2009)\r\n\r\n[DPV] (recommended): Algorithms, Sanjoy Dasgupta, Christos Papadimitriou, Umesh Vazirani (McGraw Hill, 2008)",
      "a_first" : "Terry",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Jon Kleinberg and Eva Tardos, Algorithm Design. Addison-Wesley",
      "id" : "113",
      "course_number" : "CS 161",
      "stanford_description" : "CS 161 - Algorithms\r\nProf. Luca Trevisan",
      "last_modified" : "0000-00-00",
      "s_first" : "Sean",
      "stanford_syllabus" : "Syllabus:\r\ngrading: the homeworks are worth 50% of the grade, the final 30% and the midterm 20%. We will drop the lowest homework grade in computing the homework grade average.\r\n\r\nhomeworks:\r\n\r\nlate policy: there is no late policy, late assignments will not be accepted. If you are unable to submit your homework because of extenuating circumstances such as a family of medical emergency, talk to Luca about it.\r\ncollaboration versus cheating: make sure you are familiar with our policy on collaboration\r\nhow to write your homework solution:\r\nWrite your name, student ID, homework number, and problem number on top of every page.\r\n\r\nWrite legibly. Your TAs may mark your solution as incorrect if they cannot read your handwriting.\r\n\r\nBe clear. Ambiguous statements will be interpreted at the discretion of the TA. (If the TA's interpretation of an ambiguous statement differs from what you wanted to say, this is not ground for a regrade.)\r\n\r\nThe description of your proofs should be as clear as possible (which does not mean long -- in fact, typically, good clear explanations are also short.)\r\n\r\nsubmitting the homework: TBA\r\nregrades: For regrades, you will need to submit a written justification and drop by during office hours to defend your solutions. Your TAs reserve the right to regrade the whole problem set.\r\npiazza For all homework questions (that do not divulge solutions), post to piazza\r\n\r\n\r\nApril 1. Introduction and examples notes \r\nReadings: chapter 1 and 2\r\nApril 3. Divide and conquer\r\nReadings: 5.1, 5.5\r\nApril 8. Master theorem\r\nReadings: 5.2, lecture notes\r\nApril 10. Median in linear time\r\nReadings: lecture notes\r\nApril 17. Applications of depth-first search\r\nReadings: 3.1, 3.2, 3.3, 3.5\r\nApril 15. Dijkstra's algorithm\r\nReadings: 4.4\r\nApril 22. Dynamic programming\r\nReadings 6.1, 6.2, 6.3, 6.4\r\nApril 24. All-pairs shortest path\r\nReadings: 6.8\r\nApril 29. Sequence alignment\r\nReadings: 6.5, 6.6\r\nMay 1. Greedy algorithms\r\nReadings: 4.1, 4.2\r\nMay 6. Minimum spanning tree\r\nReadings: 4.5\r\nMay 8. Union-find data structures\r\nReadings: 4.6\r\nMay 13. Cuts and flows\r\nReadings: 7.1, 7.2\r\nMay 15. Introduction to randomized algorithms\r\nReadings: 13.1, 13.2\r\nMay 20. Randomized hashing\r\nReadings: 13.6\r\nMay 22. Randomized analysis of quicksort\r\nReadings: 13.5\r\nMay 27: no class\r\n\r\nMay 29. NP-completeness\r\nReadings: chapter 8\r\nJune 3. Approximation algorithms\r\nReadings: 11.1, 11.2, 11.3\r\nJune 5. What's next: matching, linear programming, FFT, clustering",
      "a_last" : "Winograd",
      "transfer_syllabus" : "Preliminary program\r\n- General techniques (divide-and-conquer, dynamic programming, greedy algorithms);\r\n- Sorting;\r\n- Data structures and amortized complexity;\r\n- Graph algorithms;\r\n- Number theory;\r\n- Other topics (fast Fourier transform, linear programming, parallel algorithms), depending\r\non how fast we proceed.\r\n\r\nLectures\r\n\r\nLecture 1 [04/04/12]. Insertion sort. Algorithm analysis: correctness and running time. Asymptotic function growth. Computational models, the RAM model. Divide-and-conquer approach: Merge sort. Lower bound for sorting by comparison. (See CLRS Chapters 2, 3, and Theorem 8.1)\r\n\r\nLecture 2 [04/06/12]. Solving recurrences. Master theorem. Multiplication of large integers: the Karatsuba algorithm. Strassen's algorithm for matrix multiplication. Notes on the Strassen formulas. (See CLRS Chapter 4.2-4.5, DPV 2.1)\r\n\r\nLecture 3 [04/11/12]. Selection and median in linear worst-case time. Probabilities and expected values. A simpler selection algorithm with linear average-case time. (See CLRS Chapter 9 and Section 5.2)\r\n\r\nLecture 4 [04/13/12]. Quicksort; the average running time estimate. Hash tables. Designing a good hash function; universal hashing. (See CLRS Chapter 7 and Sections 11.2, 11.3)\r\n\r\nLecture 5 [04/18/12]. Binary heaps, min-heap order, and associated subroutines: \"sinking\" and building the heap. Heapsort. Binary search trees; inserting and deleting nodes. Height balanced (AVL) trees: height vs. size. (See CLRS Chapter 6, 12.1--12.3, Problem 13-3.)\r\n\r\nLecture 6 [04/20/12]. Balancing AVL trees; rotations. Recursion with subproblem sharing; memoization. Dynamic programming: knapsack, matrix-chain multiplication, longest common subsequence. (See CLRS Problem 13-3, Sections 15.2-15.4.)\r\n\r\nLecture 7 [04/25/12]. Greedy algorithms: Fractional knapsack, activity selection, Huffman codes. (See CLRS 16.1-16.3.)\r\n\r\nLecture 8 [04/27/12]. Graphs. Depth-first search. White-path theorem, parenthesis structure, and the classification of edges. Topological sort. (See CLRS 22.1, 22.3, 22.4.)\r\n\r\nLecture 9 [05/02/12]. Strongly conntected components. Shortest paths (unweighted and weighted). Breadth-first search. The Dijkstra algorithm. (See CLRS 22.2, 22.5, 24.3.)\r\n\r\nLecture 10 [05/04/12]. Correctness of the Dijkstra algorithm. Shortest paths for graphs with negative weights; the Bellman-Ford algorithm. All-pairs shortest paths. The matrix method for graph problems: algebraic requirements on the \"addition\" and \"multiplication\" involved; repeated squaring. (See CLRS Chapter 24, Section 25.1)\r\n\r\nLecture 11 [05/09/12]. All-pairs shortest paths: the Floyd-Warshall and Johnson algorithms. Dynamic tables; the amortized cost of expanding the table. A model with two operations (expand and shrink); the importance of cycles. Definition of an amortized cost system as an upper bound for an arbitrary operation sequence. Potential function. (See CLRS 25.2, 25.3, 17.1, 17.3, 17.4.)\r\n\r\nLecture 12 [05/11/12]. Examples of potential functions. Incrementing a binary counter. Increment and decrement using a redundant encoding (with 0, 1, or -1 at each binary place). Binomial heaps. Started Fibonacci heaps. (See CLRS Chapter 19.)\r\n\r\nLecture 13 [05/16/12]. Finished Fibonacci heaps. (See CLRS Chapter 19.)\r\n\r\nLecture 14 [05/18/12]. Data structures for disjoint sets. Minimum spanning forests, Kruskal's algorithm. (See CLRS 21.1, 21.2, Chapter 23.)\r\n\r\nLecture 15 [05/23/12]. Maximum flow and minimum cut. Residual graph, augmenting paths, and the Ford-Fulkerson algorithm. Integrality of the maximum flow. Bipartite matching. (See CLRS 26.1-26.3.)\r\n\r\nLecture 16 [05/25/12].. The Edmonds-Karp algorithm. Level subgraph and blocking flows. An O(n^3) algorithm for the maximum flow problem: Malhotra-Kumar-Maheshwari. (See CLRS 26.2, Kozen \"The Design and Analysis of Algorithms\", 18.2.)\r\n\r\nLecture 17 [05/30/12]. Greatest common divisor, extended Euclid's algorithm. The unique factorization theorem. Chinese remainder theorem. (See CLRS 31.1, 31.2, 31.9, 31.5.)\r\n\r\nLecture 18 [06/01/12]. Modular arithmetic; exponentiation and inversion. Abelian groups; the groups Z_q and Z_q^*. Lagrange's theorem. The order of an element; Fermat's little theorem. Probabilistic Femat test. (See CLRS 31.3, 31.6.)\r\n\r\nLecture 19 [06/06/12]. More about Abelian groups. Case study of the Fermat test: q = p^k, q = p_1 p_2, Carmichael numbers. The Miller-Rabin algorithm for primality testing. (See CLRS 31.8.)\r\n\r\nLecture 20 [06/08/12]. Cryptography; the RSA scheme. Fast parallel addition and multiplication. (See CLRS 31.7.)\r\n\r\nHomework and exam policy\r\n\r\nHomework will usually be assigned each Friday and due on the following Friday (the exact date\r\nwill be shown on each assignment). Late homework loses 25% of points and is acceptable for\r\nup to one week after the due date.\r\nDuring the term you will be allowed 3 homework extensions without penalty. The extension\r\ndeadline is 3 days after the normal deadline (i.e., Monday). It is your responsibility to write\r\non your assignment that you are using your ﬁrst, second or third extension.\r\nPlease write a solution to each problem on a separate sheet. (This is because diﬀerent\r\nproblems will be graded by diﬀerent TAs.)\r\nYou may discuss homework problems with each other, but the ﬁnal solutions should be\r\nwritten by yourself. (See special rules for bonus problems below.) You must give proper credits\r\nto people whose ideas you are using. For example, if you discussed a problem with your friend,\r\nand both of you have contributed to the solution, please write “In collaboration with. . . ”. If\r\nsomeone told you how to solve the problem, please write “The idea is due to. . . ” or make a\r\nsimilar statement.\r\nSolutions to some of the homework problems may be available on the Internet. Please do\r\nnot search for them. If you have found a solution to a problem that looks very similar, please\r\ndo not read it until you have written your own. Of course, it’s OK if you accidentally learn the\r\nsolution while reading some seemingly diﬀerent material.\r\nHomework assignments may contain optional “bonus problems”. Solving them can raise\r\nyour normalized score above 1.0. These problems may be hard and challenging. You may\r\ninclude a solution to a bonus problem only if you solved it independently or within a closed\r\ngroup of people. In the later case the points are divided between the collaborators.\r\nThere will be a midterm and a ﬁnal exam for this course. The exams are not timed, and\r\nyou will be allowed to use your own notes, the textbooks, and the class website.\r\nSolution style\r\nYou should strive to describe your algorithms at a high level using English and math, with some\r\npseudocode if necessary. Please explain your code, unless it’s really simple. Long, convoluted\r\npseudocode is not acceptable.\r\nAs a rule, an algorithm should come with a correctness proof. The level of detail may vary.\r\nSome problems speciﬁcally ask to verify loop invariants in your code. However, doing this every\r\ntime would be too tedious. Please focus on nontrivial things. Sometimes you do need to deﬁne\r\nand check the invariants maintained by your algorithm because they are not obvious.\r\n\r\nFinal grade\r\nThe ﬁnal grade will be determined by a net score, which is the sum of the normalized scores\r\nfor the homework, midterm and ﬁnal with the following coeﬃcients:\r\nhomework – 50%, midterm – 15%, ﬁnal – 35%."
   },
   {
      "student_id" : "13533",
      "transfer_description" : "CPSC156 Discrete Mathematics for Computer Science (4). F. Sets both as mathematical objects and abstract data types, logic, mathematical induction, combinatories, and probability. Applications in computer science. Prerequisite: Computer Science 185 or permission of the instructor. R. Pruim.",
      "advisor_id" : "3642",
      "s_school" : "Calvin College",
      "transcript" : "",
      "s_alias" : "mcumings",
      "state" : "processed",
      "s_last" : "Cumings",
      "a_alias" : "roberts",
      "transfer_textbooks" : "Discrete Mathematics and Its Applications; Kenneth H. Rosen",
      "a_first" : "Eric",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "",
      "id" : "140",
      "course_number" : "CS109",
      "stanford_description" : "",
      "last_modified" : "2013-04-10",
      "s_first" : "MacKenzie",
      "stanford_syllabus" : "",
      "a_last" : "Roberts",
      "transfer_syllabus" : "-"
   },
   {
      "student_id" : "13533",
      "transfer_description" : "CPSC 270 Operating Systems (3). F. An introduction to the major concepts of operating systems. Topics covered include subprogram activation, system structure, memory management, correctness, timing, and process management including concurrent programming constructs. Prerequisite: Computer Science 186. J. Adams.",
      "advisor_id" : "3642",
      "s_school" : "Calvin College",
      "transcript" : "",
      "s_alias" : "mcumings",
      "state" : "processed",
      "s_last" : "Cumings",
      "a_alias" : "roberts",
      "transfer_textbooks" : "Applied Operating System Concepts; Silberschatz, Galvin, Gagne",
      "a_first" : "Eric",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "",
      "id" : "141",
      "course_number" : "CS140",
      "stanford_description" : "",
      "last_modified" : "2013-04-10",
      "s_first" : "MacKenzie",
      "stanford_syllabus" : "",
      "a_last" : "Roberts",
      "transfer_syllabus" : "CPSC 270: Introduction to Operating Systems\r\nThis course will introduce you to the basic problems that operating systems\r\nand networks must solve, and common techniques for solving them.\r\nInstructor: Professor Joel Adams.\r\nResources: For sale in the bookstore...\r\no Operating Systems Concepts, by Silbershatz, Galvin, and Gagne\r\no Course Notes for Operating Systems and Networking (CPSC 270), by\r\nAdams.\r\nOn Reserve in the Library:\r\no Practical Unix, by Morisugu\r\no Unix Shell Programming, by Arthur and Burns\r\no Unix Programming: Methods and Tools, by Peters\r\nCourse Outcomes: Students successfully completing this course will\r\ndemonstrate that they:\r\no Understand different ways operating systems can be organized.\r\no Understand the issues in process and thread management,\r\nsynchronization, and scheduling.\r\no Understand the issues in memory management and virtual memory\r\nsystems,\r\no Can write programs that run at varying levels in the system, including:\r\n• the user-level (using system calls),\r\n• the shell-level (using a shell-script),\r\n• the kernel level, and\r\n• the network level.\r\nGrading. Your grade in this course will be based upon the number of points\r\nyou earn on (i) tests and (ii) projects, which will be weighted at 45% and\r\n55%, respectively. There will be three tests, weighted at 15% each.\r\nCourse Organization. This course consists of two components:\r\n• The lectures and tests, that emphasize the principles and concepts that\r\nunderly operating systems; and\r\n• The projects, that provide practical, hands-on experience in systems\r\nprogramming.\r\nBy presenting both aspects of operating systems in one course, the theoretical\r\nand practical aspects will supplement and reinforce each other.\r\nLecture\r\nReading\r\n(Chapter)\r\nTopic (Notes) Project\r\nPart I\r\n0 Course Intro\r\n1,2 1 A Brief OS History Using System Calls\r\n3,4 1 Hardware Review\r\n5,6 1 OS Structure Models\r\n7,8 2 Processes User Interfaces\r\n9 2 Threads\r\n10-12 3 CPU Scheduling Shell Scripting\r\nPart II\r\n13-15 4\r\nProcess/Thread\r\nSynchronization\r\n16 4 Deadlocks A Command Shell\r\n17-19 6 Mem. Management\r\n20-22 7 Virtual Memory\r\nPart III\r\n23, 24 8 File Systems Writing System Calls\r\n25, 26 8 Storage Management\r\n27-29 10 Networks Client-Server Systems\r\n30-32 11 Distributed Systems"
   },
   {
      "student_id" : "13533",
      "transfer_description" : "CPSC 330 Database Management Systems (3). * F. An introduction to the structures necessary to implement a database management system. Topics include data models (including hierarchical, network, and relational data models), normal forms for data relations, data description languages, query facilities. An introduction to existing data base management systems is given. Laboratory. Prerequisite: Computer Science 230. K. Vander Linden",
      "advisor_id" : "3642",
      "s_school" : "Calvin College",
      "transcript" : "",
      "s_alias" : "mcumings",
      "state" : "processed",
      "s_last" : "Cumings",
      "a_alias" : "roberts",
      "transfer_textbooks" : "Fundamentals of Database Systems; Elmasri, Navathe",
      "a_first" : "Eric",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "",
      "id" : "142",
      "course_number" : "CS145",
      "stanford_description" : "",
      "last_modified" : "2013-04-10",
      "s_first" : "MacKenzie",
      "stanford_syllabus" : "",
      "a_last" : "Roberts",
      "transfer_syllabus" : "CPSC-330: Course Schedule\r\nThe topics to be covered and the associated reading assignments are given here. More detailed reading assignments are given in the lectures. Unless noted otherwise, the readings are taken from the course text (Elmasri and Navathe).\r\n\r\nDates Lectures and readings Labs and projects\r\nSept. 4-7 Introduction (html)\r\nChapters 1 & 2 Lab #1\r\nProject #1 (solution)\r\n\r\nSept. 10-14 Database Models (html):\r\nEntity-Relationship (html)\r\nObject-Oriented (html)\r\nThe course database examples:\r\nThe CentrePointe Database\r\nThe Grading Database\r\nChapters 3, 4, 11 & 12 Lab #2\r\nProject #2 (solution)\r\n\r\nSept. 17-21 More database models:\r\nNetwork and Hierarchical (html)\r\nRelational (html)\r\n\r\nChapters 7 & 9, Appendixes C & D Lab #3\r\nProject #3 (solution)\r\n\r\nSept. 24-28 Designing Relational Databases (html)\r\nChapters 14 & 15 Lab #4\r\nProject #4 (solution)\r\n\r\nOct. 1-5 DBMS Architecture (html)\r\nSection 2.4, Chapters 5, 6, 8 & 17 Lab #5\r\nProject #5\r\n\r\nOct. 8-12 Exam 1 (Wed., Oct. 10)\r\nLab #6\r\nProject #6 (solution)\r\n\r\nOct. 15-19 Relational Algebra and Calculus (html)\r\nSections 7.4-7.6 & 9.3\r\nEF Codd\r\nLab #7\r\nProject #7 (solution)\r\n\r\nOct. 22-26 SQL Queries (html)\r\nChapter 8 Lab #8\r\nProject #8 (solution)\r\n\r\nOct. 29 - Nov. 2 SQL Queries (cont.)\r\nChapter 8 Lab #9\r\nProject #9 (solution)\r\n\r\nNov. 5-9 SQL Queries (cont.)\r\nChapter 8 Lab #10\r\nProject #10 (solution)\r\n\r\nNov. 12-16 Review (html)\r\nExam 2 (Wed., Nov. 14)\r\nLab #11\r\nProject #11 (solution)\r\n\r\nNov. 19-21 SQL in Context (html)\r\nSection 23.1 - Lab & Project #12 (solution)\r\nThanksgiving\r\nNov. 26-30 SQL in Context (cont.)\r\nChapters 10 & 19 Lab #13\r\nProject #13 (solution)\r\n\r\nDec. 3-7 Interfaces to Databases (html)\r\nSections 2.3.2 & 9.5 Lab #14\r\nProject #14 (solution)\r\n\r\nFinals Week Final PDP System (Wed., Dec. 12, 5:00pm)\r\nFinal Exam (Tues., Dec. 11, 9:00am)\r\n\r\n\r\n\r\nLast modified: Thu Dec 13 12:26:52 EST 2001\r\nKeith Vander Linden\r\n©Calvin College 2001\r\n\r\n\r\n\r\n\r\n\r\nCPSC-330: Database Management Systems\r\nFall, 1997\r\n\r\nInstructor: Keith Vander Linden\r\nCourse Objectives: This course introduces the tools and techniques used by organizations to create and maintain large data sets. In particular, we will dicuss:\r\n• Database models:\r\no the Entity-Relationship model;\r\no Object-Oriented models;\r\no the Relational model;\r\n• Database design;\r\n• Query languages, including SQL;\r\n• Database system architecture;\r\n• Transaction management;\r\n• Data security;\r\nGiven that databases and their management raise serious ethical and religious questions, we will also attempt to place them in a Christian context.\r\nAdminstrivia - Course Schedule - Project - Other links\r\n\r\nLast modified: Fri Sep 5 14:37:33 EDT 1997\r\nKeith Vander Linden\r\n©Calvin College 1997\r\n\r\n\r\n\r\nCPSC-330: Administrivia\r\nInstructor: Keith Vander Linden\r\nNorth Hall 290\r\nphone: x7111\r\nemail: kvlinden@calvin.edu\r\ninternet: http://www.calvin.edu/~kvlinden\r\n\r\n\r\nOffice Hours: Monday and Wednesday, 3:30-4:30\r\nor by appointment\r\nText:\r\n• Fundamentals of Database Systems, Elmasri and Navathe, Addison Wesley, 2000.\r\n• Overheads (copies available at the bookstore), Vander Linden;\r\nGrading: I will compute your final grade as follows:\r\n• 20% Weekly labs and homeworks;\r\n• 20% An individual project;\r\n• 40% Two midterm exams;\r\n• 20% Cumulative final;\r\nIndividual Work: Your weekly homeworks and your project will be done individually, but you should feel free to discuss ideas with your classmates or with me; just avoid any copying. If I detect any copying, I'll be forced to give a failing grade on the homework and perhaps for the course.\r\nThe Programming Environment: In general, the programming work will be done using the Oracle database system which we have running on holmes.calvin.edu. If you would like to do your homeworks on another database system (e.g., MS Access), please stop by and discuss it with me.\r\nDisabilities: Calvin will make reasonable accommodations for persons with documented disabilities. Students should notify a Coordinator of Services to Students with Disabilities located in Student Academic Services, HH455. You should also notify me within the first two weeks of class.\r\nAttendance: I will not grade you on class attendance. If you do miss a class for any reason, I'd appreciate it if you stopped in to see me so we can review the material and activities of the missed session.\r\nIncompletes: I will give an incomplete grade (I) only in unusual circumstances, and only if those circumstances have been confirmed by the Student Life office.\r\nLate Work: I will clearly indicate a due date for all assignments. Anything submitted up to one week after that date is late, unless you have made prior arrangements with me. For each late paper, you will be charged 10% for each day that you are late. I will not generally accept papers more than one week late, nor will I accept late papers at all if you have attended the in-class discussion of the solution. Please come and talk to me if there are exceptional circumstances, and we'll work something out. I will also grant you 2 grace days with no penalty, no questions asked.\r\n\r\nLast modified: Wed Sep 5 11:49:57 EDT 2001\r\n"
   },
   {
      "student_id" : "13533",
      "transfer_description" : "CPSC 230 Data Structures and Algorithms (3). F. A systematic study of algorithms and their application to data structures, including arrays, lists, trees, heaps, hash tables, and graphs. Algorithms and data structures are analyzed in their use of both time and space, and the choice of data structure in problem solving is studied. Theoretical issues, such as optimality, bestand worst-case performance, and limitations of algorithms are studied, as well as implementation issues. Prerequisites: Computer Science 186 and Mathematics 156, which may be taken concurrently. N. (sic) Plantinga.",
      "advisor_id" : "3642",
      "s_school" : "Calvin College",
      "transcript" : "",
      "s_alias" : "mcumings",
      "state" : "processed",
      "s_last" : "Cumings",
      "a_alias" : "roberts",
      "transfer_textbooks" : "Algorithms in C++; Robert Sedgewick",
      "a_first" : "Eric",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "",
      "id" : "143",
      "course_number" : "CS161",
      "stanford_description" : "",
      "last_modified" : "2013-04-10",
      "s_first" : "MacKenzie",
      "stanford_syllabus" : "",
      "a_last" : "Roberts",
      "transfer_syllabus" : "CPSC 212 -- Data Structures and Algorithms\r\nSyllabus\r\nSep. 9, 11 Ch. 1. Algorithm Analysis For Friday: read sections 1.1, 1.2\r\nFor Monday: read 1.3.1, 1.3.2\r\nHomework 1, due Wednesday, 9/16\r\nSep. 14, 16, 18 Ch. 1. Algorithm Analysis, cont. Homework 2, due 9/21\r\nProgram 1: Log Log, due 9/25\r\nSep. 21, 23, 25 Ch. 2. Basic Data Structures: Stacks, Queues, and Trees, Priority Queues and Heaps Homework 3: R-1.6, R-1.23, C-1.1, C-1.3, C-1.8, C-1.25 (use O(log n) testers), due 9/25\r\nHomework 4: R-2.12, R-2.16, R-2.17, C-2.4, C-2.11, C-2.16, due 9/30\r\n\r\nSep. 28, 30, Oct. 2 Ch. 2.5. Dictionaries and Hash Tables.\r\nHomework 5: R-2.19, R-2.20, R-2.22, due 10/5\r\n\r\nOct. 5, 7, 9 Ch. 3. Search Trees. Program 2: Babble, due 10/16 [resources]\r\nRead ch. 3 sections 1 and 3.\r\nHomework 6: due 10/9\r\nOct. 12, 14, 16 Ch. 4. Sorting, Sets, and Selection. Oct. 12: Test 1.\r\nRead ch. 4.\r\nHomework 7, due Friday, 10/23\r\nOct. 19, 21, 23 Ch. 5. Fundamental Algorithm Design Techniques. Program 3: Fractal Ferns, due 11/02 [resources, ex1 - ex2]\r\nOct. 26, 30 Ch. 5, cont. Dynamic programming.\r\nHomework 8, due Wednesday, 11/4\r\nNov. 2, 4, 6 Ch. 6. Graph Algorithms. Homework 9, due Monday, 11/09\r\nProgram 4: Bingo, due 11/23. [resources]\r\nNov. 9, 11, 13 Ch. 6. Graph algorithms cont.\r\nCh. 7. Weighted graphs, shortest paths. Homework 10: R-6.6, R-6.8, R-6.9, C-6.13, due 11/13\r\nNov. 16, 18, 20 AI. Intelligent systems search techniques. Minimax search. Nov. 16: Test 2.\r\nHomework 11, due Wednesday, 11/25\r\n\r\nNov. 23, 25 AI, cont. Intelligent systems search techniques. Minimax search.\r\nHeuristic search, philosophical issues\r\nProgram 5: AI game player, due 12/9 [resources]\r\nNov. 30, Dec. 2, 4 AI, cont.\r\nCh. 9. Text processing. Parallel algorithms.\r\nDec. 7, 9, 11 Ch. 9, cont. Friday: tournament!\r\n\r\nFinal Exam: Friday, December 18, 9:00 am "
   },
   {
      "student_id" : "13533",
      "transfer_description" : "MATH 231, Spring 2001\r\n\r\n* Course Description: 231 Differential Equations with Linear Algebra (4). F and S. Solutions and applications of first and second order ordinary differential equations. Laplace transforms. Elementary linear algebra. Systems of linear differential equations, numerical methods, and non-linear equations. Prerequisites: Mathematics 162 and experience in computer programming. Staff.\r\n\r\nMATH 261, Fall 2000\r\n\r\n* Course Description: 261 Multivariate Calculus (4). F and S. A study of vectors and functions in two and three dimensions. Polar, cylindrical, and spherical coordinate systems. Partial derivatives, multiple integrals, vector functions, and vector analysis. Prerequisite: Mathematics 162. Staff.\r\n\r\nMATH 352, Spring 2003\r\n\r\n* Course Description: 352 Advanced Linear Algebra (4). S, alternate years. Vector spaces, matrices, linear equations, linear transformations, determinants, polynomial algebras, eigenvalues and eigenvectors, inner-product spaces, spectral decompositions, and canonical forms for matrices. Prerequisite: Mathematics 361 or permission of the instructor. D. Brink.",
      "advisor_id" : "3642",
      "s_school" : "Calvin College",
      "transcript" : "",
      "s_alias" : "mcumings",
      "state" : "processed",
      "s_last" : "Cumings",
      "a_alias" : "roberts",
      "transfer_textbooks" : "Differential Equations; Blanchard, Devaney, Hall\r\nCalculus, Early Transcendentals; James Stewart\r\nLinear Algebra and Its Applications; Gilbert Strang",
      "a_first" : "Eric",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "",
      "id" : "144",
      "course_number" : "CS205A",
      "stanford_description" : "",
      "last_modified" : "2013-04-10",
      "s_first" : "MacKenzie",
      "stanford_syllabus" : "",
      "a_last" : "Roberts",
      "transfer_syllabus" : "-"
   },
   {
      "student_id" : "15262",
      "transfer_description" : "UC Berkeley:\r\n1) Math 55 (equivalent to CS 70)\r\nLogic, mathematical induction sets, relations, and functions. Introduction to graphs, elementary number theory, combinatorics, algebraic structures, discrete probability theory; \r\n\r\n2) CS 188 - Introduction to Artificial Intelligence\r\nBasic ideas and techniques underlying the design of intelligent computer systems. Topics include naive bayes classification, machine learning, heuristic search, problem solving, game playing, knowledge representation, logical inference, planning, reasoning under uncertainty, expert systems, learning, perception, language understanding. \r\n\r\nNote: I took Stanford's CS 276 (received A-), Information Retrieval and Web Search, which is relevant to this foundation waiver. The course dealt with boolean, vector space, and probabilistic retrieval models toward efficient classification and clustering methods in search.",
      "advisor_id" : "4901",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "tedkim",
      "state" : "processed",
      "s_last" : "Kim",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Math 55: Kenneth H. Rosen, Discrete Mathematics and Its Applications;\r\n\r\nCS 188: Russell and Norvig, Artificial Intelligence: A Modern Approach",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Ross, First Course in Probability",
      "id" : "101",
      "course_number" : "CS109",
      "stanford_description" : "(Description of CS 109) This course covers applications of probability in computer science, including machine learning and the use of probability in the analysis of algorithms.",
      "last_modified" : "0000-00-00",
      "s_first" : "Ted",
      "stanford_syllabus" : "http://scpd.stanford.edu/search/publicCourseSearchDetails.do?method=load&courseId=11713\r\nCounting and combinatorics\r\nRandom variables\r\nConditional probability\r\nIndependence\r\nDistributions\r\nExpectation\r\nPoint estimation\r\nLimit theorems",
      "a_last" : "Lam",
      "transfer_syllabus" : "(Above description should suffice, but listing syllabus below)\r\nMath 55:\r\nWeek 1: Propositional logic, quantifiers, rules of inference, proof techniques (Chapter 1)\r\nWeek 2: Sets, functions, countability and uncountable sets (Sections 2.1-2.3, and part of 2.4 on cardinality) Algorithms, halting problem (Section 3.1), also discuss undecidability in lectures\r\nWeek 3: Division algorithm, modular arithmetic, primes, GCD (Sections 3.4-3.5)\r\nWeek 4: Euclidean algorithm, modular exponentiation, solving congruences, Chinese Remainder Theorem, applications to cryptography (Sections 3.6-3.7)\r\nWeek 5: Induction and recursion, recursive algorithms (Sections 4.1-4.4; revisit 2.4 for summations)\r\nWeek 6: Counting, pigeon hole principle, permutations and combinations, binomial coefficients, distributions, Stirling numbers (Sections 5.1-5.5)\r\nWeek 7: Discrete probability theory, conditional probability, independence, random variables (Sections 6.1-6.2)\r\nWeek 8: Bayes' Theorem and applications (Section 6.3) Expected value, variance, Chebyshev's inequality (Section 6.4)\r\nWeek 9: Recurrence relations and generating functions (Sections 7.1-7.2 and Examples 10-15 in 7.4)\r\nWeek 10: Inclusion-exclusion, derangements, formula for Stirling numbers (Sections 7.5, 7.6)\r\nWeek 11: Relations, directed graphs, transitive closure, equivalence relations, set partitions, partial orders (Section 8.1, part of 8.3 on digraphs, 8.4-8.6)\r\nWeek 12: Graphs, isomorphism, connectivity (Sections 9.1-9.4)\r\nWeek 13: Trees, spanning trees, minimum-weight spanning trees (Sections 10.1, 10.4-10.5)\r\n\r\nCS188:\r\nIntroduction to AI\r\nAgents and Search\r\nA* Search and Heuristics\r\nConstraint Satisfaction Problems\r\nCSPs II\r\nGame Trees: Minimax\r\nGame Trees: Expectimax\r\nUtility Theory\r\nMarkov Decision Processes\r\nMDPs II\r\nReinforcement Learning\r\nReinforcement Learning II\r\nProbability\r\nBayes' Nets: Representation\r\nBayes' Nets: Independence\r\nBayes' Nets: Inference\r\nBayes' Nets: Structure\r\nBayes' Nets: Sampling\r\nDecision Diagrams\r\nHMMs: Monitoring\r\nHMMs: Particle Filtering\r\nHMMs for Speech Recognition\r\nMachine Learning: Naive Bayes\r\nMachine Learning: Perceptron\r\nMachine Learning: Perceptron and Kernels"
   },
   {
      "student_id" : "15262",
      "transfer_description" : "UC Berkeley - Math 55 (equivalent to CS 70)\r\nLogic, mathematical induction sets, relations, and functions. Introduction to graphs, elementary number theory, combinatorics, algebraic structures, discrete probability theory.\r\n\r\nNote: I'd like to add a relevant Stanford course I've taken in this section.  In CS 255 (received A-), Introduction to Cryptography, we learned to use logic and induction proof techniques to confirm that various cryptographic techniques will give an adversary no better than brute-force chance to break security and integrity requirements.",
      "advisor_id" : "4901",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "tedkim",
      "state" : "processed",
      "s_last" : "Kim",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Kenneth H. Rosen, Discrete Mathematics and Its Applications",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Online reader: http://www.stanford.edu/class/cs103/notes/Mathematical%20Foundations%20of%20Computing.pdf;\r\n\r\nRecommended text books:\r\nKenneth H. Rosen, Discrete Mathematics and Its Applications;\r\nMichael Sipser, Introduction to the Theory of Computation",
      "id" : "100",
      "course_number" : "CS103",
      "stanford_description" : "(Description of CS103) CS103 will give students the mathematical foundations necessary for computer science. Topics include proof techniques and logic; induction; sets, functions, and relations; an introduction to formal languages; DFA's, NFA's, and Regular Expressions; Context-Free Grammars, Turing Machines, and NP-Completeness.",
      "last_modified" : "0000-00-00",
      "s_first" : "Ted",
      "stanford_syllabus" : "Please see description above.",
      "a_last" : "Lam",
      "transfer_syllabus" : "Week 1: Propositional logic, quantifiers, rules of inference, proof techniques (Chapter 1)\r\nWeek 2: Sets, functions, countability and uncountable sets (Sections 2.1-2.3, and part of 2.4 on cardinality) Algorithms, halting problem (Section 3.1), also discuss undecidability in lectures\r\nWeek 3: Division algorithm, modular arithmetic, primes, GCD (Sections 3.4-3.5)\r\nWeek 4: Euclidean algorithm, modular exponentiation, solving congruences, Chinese Remainder Theorem, applications to cryptography (Sections 3.6-3.7)\r\nWeek 5: Induction and recursion, recursive algorithms (Sections 4.1-4.4; revisit 2.4 for summations)\r\nWeek 6: Counting, pigeon hole principle, permutations and combinations, binomial coefficients, distributions, Stirling numbers (Sections 5.1-5.5)\r\nWeek 7: Discrete probability theory, conditional probability, independence, random variables (Sections 6.1-6.2)\r\nWeek 8: Bayes' Theorem and applications (Section 6.3) Expected value, variance, Chebyshev's inequality (Section 6.4)\r\nWeek 9: Recurrence relations and generating functions (Sections 7.1-7.2 and Examples 10-15 in 7.4)\r\nWeek 10: Inclusion-exclusion, derangements, formula for Stirling numbers (Sections 7.5, 7.6)\r\nWeek 11: Relations, directed graphs, transitive closure, equivalence relations, set partitions, partial orders (Section 8.1, part of 8.3 on digraphs, 8.4-8.6)\r\nWeek 12: Graphs, isomorphism, connectivity (Sections 9.1-9.4)\r\nWeek 13: Trees, spanning trees, minimum-weight spanning trees (Sections 10.1, 10.4-10.5)"
   },
   {
      "student_id" : "15262",
      "transfer_description" : "UC Berkeley: CS 61C \r\n\r\nThe subjects covered in this course include: C and assembly language programming, how higher level programs are translated into machine language, computer organization, caches, performance measurement, parallelism, CPU design, warehouse-scale computing, and related topics. ",
      "advisor_id" : "4901",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "tedkim",
      "state" : "processed",
      "s_last" : "Kim",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Patterson and Hennessy, Computer Organization and Design;\r\nKernighan, C Programming Language",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Bryant, Computer Systems: A Programmer's Perspective;\r\nKernighan, C Programming Language",
      "id" : "97",
      "course_number" : "CS107",
      "stanford_description" : "(Description of CS107) Introduction to the fundamental concepts of computer systems. Explores how computer systems execute programs and manipulate data, working from the C programming language down to the microprocessor. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, memory organization and management, and performance evaluation and optimization.",
      "last_modified" : "0000-00-00",
      "s_first" : "Ted",
      "stanford_syllabus" : "C programming language\r\nMachine-level code and elements of code compilation\r\nComputer arithmetic\r\nPerformance evaluation and optimization\r\nMemory organization and management",
      "a_last" : "Lam",
      "transfer_syllabus" : "The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions."
   },
   {
      "student_id" : "15262",
      "transfer_description" : "UC Berkeley - CS 162 Operating Systems\r\n\r\nBasic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.\r\n\r\nNote: I took a couple of other Stanford courses which are relevant for this waiver. First, I took CS 255 (received A-), Introduction to Cryptography, which dove into security, encryption, and cryptographic techniques. I also took Stanford's CS 144 (received B+), Introduction to Computer Networking, which taught about various networking concepts. Perhaps another course of relevance is CS 243 (received A-), Program Analysis and Optimizations, which showed how to reason about security and performance using analysis techniques in the context of compilers. Finally, I am currently taking CS 240, Advanced Topics in Operating Systems, where I am learning about new research and industry practices in various OS topics multicore (parallelism) support, virtualization, and distributed data stores.",
      "advisor_id" : "4901",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "tedkim",
      "state" : "processed",
      "s_last" : "Kim",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Silberschatz, Galvin, and Gagne; Operating System Concepts",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Saltzer, Principles of Computer System Design",
      "id" : "98",
      "course_number" : "CS110",
      "stanford_description" : "(Description of CS110) Principles and practice of engineering of computer software and hardware systems.",
      "last_modified" : "0000-00-00",
      "s_first" : "Ted",
      "stanford_syllabus" : "Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations.",
      "a_last" : "Lam",
      "transfer_syllabus" : "Please see description above."
   },
   {
      "student_id" : "15262",
      "transfer_description" : "UC Berkeley: CS 61B\r\nAlgorithms for sorting and searching. Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays, strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Introduction to the Java programming language.\r\n\r\nNote: I took a couple of other Stanford courses which are relevant for this waiver. First, I took CS 276 (received A-), Information Retrieval and Web Search, which dealt heavily with asymptotic and Big-O analysis of applying different search methods. I also took Stanford's CS 243 (received A-), Program Analysis and Optimizations, which involved analysis techniques that utilize mathematical abstractions like graphs for optimizing software.",
      "advisor_id" : "4901",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "tedkim",
      "state" : "processed",
      "s_last" : "Kim",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Kathy Sierra and Bert Bates, Head First Java;\r\nMichael T. Goodrich and Roberto Tamassia, Data Structures and Algorithms in Java",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Kleinberg and Tardos, Algorithm Design",
      "id" : "99",
      "course_number" : "CS161",
      "stanford_description" : "(Description of CS161) Learn about efficient algorithms for sorting, searching, and selection. Explore algorithm analysis, recurrences and asymptotics, as well as data structures including balanced trees, heaps, and hash tables. Gain an understanding of algorithm design techniques and work on algorithms for graph problems including depth-first search, connected components, topological sort, and shortest paths.",
      "last_modified" : "0000-00-00",
      "s_first" : "Ted",
      "stanford_syllabus" : "Algorithm analysis; worst and average case\r\nRecurrences and asymptotics\r\nAlgorithms for sorting and selection\r\nRandomized techniques\r\nSearch structures: heaps, balanced trees, skip lists, hash tables\r\nDynamic programming and greedy algorithms\r\nAmortized analysis\r\nGraph algorithms: breadth- and depth-first search, MSTs, shortest paths\r\nNetwork flows",
      "a_last" : "Lam",
      "transfer_syllabus" : "http://www.cs.berkeley.edu/~jrs/61b/\r\nUsing objects  \r\nDefining classes  \r\nTypes; conditionals  \r\nIteration & arrays I  \r\nIteration & arrays II  \r\nLinked lists I  \r\nLinked lists II  \r\nStack frames  \r\nTesting  \r\nAbstract classes  \r\nJava packages  \r\nExceptions  \r\nGame Trees  \r\nEncapsulation  \r\nEncapsulated lists  \r\nAsymptotic analysis  \r\nAlgorithm analysis  \r\nDictionaries & hash tables  \r\nHash codes; Stacks & queues  \r\nTrees and traversals  \r\nPriority queues  \r\nBinary search trees  \r\nBalanced search trees  \r\nGraphs  \r\nWeighted graphs  \r\nFour sorting algorithms  \r\nQuicksort  \r\nDisjoint Sets  \r\nSorting & selection  \r\nRadix sort  \r\nSplay trees  \r\nAmortized analysis  \r\nRandomized analysis  \r\nGarbage collection  \r\nAugmenting data structures  "
   },
   {
      "student_id" : "14550",
      "transfer_description" : "Advanced Mathematics\r\nThe Advanced Mathematics classes last 2 semesters (1 academic year). It is comprised of 3 sections: calculus, linear algebra and probability & statistics. In the calculus section, functions and proof techniques are introduced and extensively used, including induction, proof by contradiction, etc. Discrete structures like set and its properties are introduced in the probability & statistics section.",
      "advisor_id" : "11354",
      "s_school" : "Harbin Eng Univ",
      "transcript" : "",
      "s_alias" : "rhlchief",
      "state" : "approved",
      "s_last" : "Ren",
      "a_alias" : "federico.barbagli",
      "transfer_textbooks" : "Calculus section: “Calculus Tutorial”, edited by Department of Applied Mathematics at Harbin Engineering University, Harbin Engineering University Press, 2003\r\nProbability section: “Probability theory and mathematical statistics” - Shijiu Yu, Harbin Engineering University Press, 2005\r\n",
      "a_first" : "Federico",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "These are recommended, if you want to read another source, not required: Chapter 1 of “Discrete Mathematics and its Applications” by Kenneth R. Rosen and “Introduction to the Theory of Computation” by Michael Sipser (the whole thing).",
      "id" : "126",
      "course_number" : "cs103",
      "stanford_description" : "To satisfy this requirement, students should have taken coursework covering essential mathematical concepts in computing, including logic, proof techniques, discrete structures (sets, functions, and relations), automata and complexity theory. Students should have an understanding of how to construct a formal proof and various standard proof techniques (direct proof, proof by contradiction, induction, diagonalization). Additionally, students should have significant exposure to finite automata, regular expressions, context-free grammars, Turing Machines, computability (e.g., decidability and the halting problem), and computational complexity including a rigorous treatment of NP-Completeness. Note that this requirement is most likely fulfilled by more than one course at many other institutions.",
      "last_modified" : "2013-04-10",
      "s_first" : "Hualong",
      "stanford_syllabus" : "1, Introduction, Sets\r\n2, Logic I\r\n3, Logic II\r\n4, Finite Sets and Relations\r\n5, Finite Sets, Relations, and Functions\r\n6, Graphs\r\n7, Proof methods I\r\n8, Proof methods II\r\n9, Infinite sets: cardinality, diagonalization\r\n10, Induction I\r\n11, Induction II\r\n12, Trees and structural induction\r\n13, SAT solving\r\n14, Regular languages I\r\n15, Regular languages II\r\n16, Regular languages III\r\n17, Regular languages IV\r\n18, Pumping Lemma and Closure Properties\r\n19, Context-free Languages I\r\n20, Context-free Languages II\r\n21, Context-free Languages III\r\n22, Turing Machines I\r\n23, Turing Machines II\r\n24, Undecidability I\r\n25, Undecidability II\r\n26, NP Completeness I\r\n27, NP Completeness II\r\n",
      "a_last" : "Barbagli",
      "transfer_syllabus" : "Only the syllabuses for calculus and probability sections are listed here for simplicity.\r\nCalculus syllabus\r\n1\tFunctions, limits, continuity\r\n2\tThe derivative of single variable functions\r\n3\tMean value theorem, Derivatives, and their applications\r\n4\tIndefinite integral\r\n5\tDefinite integral\r\n6\tApplications of definite integral\r\n7\tvectors and analytic geometry\r\n8\tThe derivative of multi-variable functions\r\n9\tThe integral of multi-variable functions\r\n10\tCurve integral and flaechenintegral surface integral\r\n11\tInfinite series\r\n12\tOrdinary differential equations\r\nProbability syllabus\r\n1\tRandom Event and probability\r\n1.1\trandom event\r\n1.2\tsample space and sets theory\r\n1.3\tfrequency and probability\r\n1.4\tconditional probability\r\n1.5\tindependence\r\n2\tRandom variable and probability distributions\r\n2.1\trandom variable\r\n2.2\tdiscrete random variable and probability distribution\r\n2.3\tcontinuous random variable and probability distribution\r\n2.4\tdistribution functions of random variables\r\n3\tMulti-dimensional random variable and probability distributions\r\n3.1\t2-d random variables and their probability distributions\r\n3.2\tMarginal distribution\r\n3.3\tconditional distribution\r\n3.4\tIndependent variables and their probability distributions\r\n4\tMathematical characteristic of random variable\r\n4.1\texpectation\r\n4.2\tvariation\r\n4.3\texpectation and variation of some classical random variables\r\n4.4\tcorrelation\r\n5\tLaw of large numbers and central limit theorem\r\n5.1\tChebyshev inequality\r\n5.2\tChebyshev’s law of large numbers\r\n5.3\tBernoulli's law of large numbers\r\n5.4\tCentral limit theorem\r\n6\tStatistics basics\r\n6.1\trandom sampling\r\n6.2\tstatistics\r\n6.3\tthe distribution of random samples\r\n7\tParameter estimation\r\n"
   },
   {
      "student_id" : "14550",
      "transfer_description" : "The Advanced Mathematics classes last 2 semesters (1 academic year). It is comprised of 3 sections: calculus, linear algebra and probability & statistics.",
      "advisor_id" : "11354",
      "s_school" : "Harbin Eng Univ",
      "transcript" : "",
      "s_alias" : "rhlchief",
      "state" : "approved",
      "s_last" : "Ren",
      "a_alias" : "federico.barbagli",
      "transfer_textbooks" : "\"Principles and Applications of Microcomputers\" - Shuping Lv, Harbin Engineering University Press",
      "a_first" : "Federico",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "Sheldon Ross, A First Course in Probability (9th Ed.), Pearson Prentice Hall, 2013.",
      "id" : "124",
      "course_number" : "cs109",
      "stanford_description" : "The Foundations requirement in statistics can usually be satisfied by any course in probability taught from a rigorous mathematical perspective. Courses in statistics designed for social scientists generally do not have the necessary sophistication.\r\nThe class starts by providing a fundamental grounding in combinatorics, and then quickly moves into the basics of probability theory. We will then cover many essential concepts in probability theory, including particular probability distributions, properties of probabilities, and mathematical tools for analyzing probabilities. Finally, the last third of the class will focus on data analysis and Machine Learning as a means for seeing direct applications of probability in this exciting and quickly growing subfield of computer science.",
      "last_modified" : "2013-04-10",
      "s_first" : "Hualong",
      "stanford_syllabus" : "1, Counting\r\n2, Combinations, Permutations\r\n3, Sample spaces, Axioms of probability\r\n4, Conditional probability, Bayes Theorem\r\n5, Independence\r\n6, Discrete random variables, Mass functions & Expectations\r\n7, Variance, Discrete probability distributions\r\n8, More discrete distributions\r\n9, Continuous random variables, Simple continuous distributions\r\n10, Normal distribution\r\n11, Joint distribution functions\r\n12, Independent random variables\r\n13, Conditional distributions\r\n14, Properties of expectation, Expected algorithm running times\r\n15, Covariance, Correlation\r\n16, Conditional expectation\r\n17, Moment generating functions\r\n18, Helpful inequalities and theorems\r\n19, Central limit theorem\r\n20, Parameter estimation, Method of moments\r\n21, Maximum likelihood estimation\r\n22, Prior probabilities\r\n23, Introduction to machine learning, Naïve Bayes classifier\r\n24, Logistic regression\r\n25, Modeling uncertainty utility\r\n26, Simulation probabilities, Monte Carlo simulation",
      "a_last" : "Barbagli",
      "transfer_syllabus" : "Only the syllabus for probability section is listed here for simplicity.\r\n1\tRandom Event and probability\r\n1.1\trandom event\r\n1.2\tsample space and sets theory\r\n1.3\tfrequency and probability\r\n1.4\tconditional probability\r\n1.5\tindependence\r\n2\tRandom variable and probability distributions\r\n2.1\trandom variable\r\n2.2\tdiscrete random variable and probability distribution\r\n2.3\tcontinuous random variable and probability distribution\r\n2.4\tdistribution functions of random variables\r\n3\tMulti-dimensional random variable and probability distributions\r\n3.1\t2-d random variables and their probability distributions\r\n3.2\tMarginal distribution\r\n3.3\tconditional distribution\r\n3.4\tIndependent variables and their probability distributions\r\n4\tMathematical characteristic of random variable\r\n4.1\texpectation\r\n4.2\tvariation\r\n4.3\texpectation and variation of some classical random variables\r\n4.4\tcorrelation\r\n5\tLaw of large numbers and central limit theorem\r\n5.1\tChebyshev inequality\r\n5.2\tChebyshev’s law of large numbers\r\n5.3\tBernoulli's law of large numbers\r\n5.4\tCentral limit theorem\r\n6\tStatistics basics\r\n6.1\trandom sampling\r\n6.2\tstatistics\r\n6.3\tthe distribution of random samples\r\n7\tParameter estimation\r\n"
   },
   {
      "student_id" : "14550",
      "transfer_description" : "“Principles and Applications of Microcomputers\"\r\nThe course gives a systematical view of a modern computer organization from hardware(ALU, registers, memory addressing modes, floating point and fixed point data representations, interrupts) all the way up to source code(assembly instructions, stack segment, code segment and data segment). The course also introduces the general process of developing a software program: preprocessing the source code, assembling, linking, until generating the executable binary.\r\n",
      "advisor_id" : "11354",
      "s_school" : "Harbin Eng Univ",
      "transcript" : "",
      "s_alias" : "rhlchief",
      "state" : "approved",
      "s_last" : "Ren",
      "a_alias" : "federico.barbagli",
      "transfer_textbooks" : "\"Principles and Applications of Microcomputers\" - Shuping Lv, Harbin Engineering University Press",
      "a_first" : "Federico",
      "created_on" : "2013-04-10",
      "stanford_textbooks" : "     Computer Systems: A Programmer's Perspective, Bryant & O'Hallaron (required)\r\n     The C Programming Language, Kernighan & Ritchie (recommended)\r\n",
      "id" : "119",
      "course_number" : "cs107",
      "stanford_description" : "This course gives students a basic understanding of computer systems from the hardware level up the source code level. Such familiarity should include concepts such as basic computer organization (e.g., registers, ALUs, memory, addressing, program control, runtime stack, etc.), memory models (data representation, pointers), and fundamentals of compilation (simple assembly code, basics of code generation, linking, and loading).",
      "last_modified" : "2013-04-10",
      "s_first" : "Hualong",
      "stanford_syllabus" : "     1 Admin, intro to systems, C basics, UNIX development tools\r\n     2 C pointers/arrays, C-strings\r\n     3 C generics, void *, function pointers, bits and bytes\r\n     4 Integer and floating point representation, computer arithmetic\r\n     5 IA32: addressing, arithmetic\r\n     6 IA32: control function calls, runtime stack\r\n     7 Compilation tool chain, linkers, loaders\r\n     8 Address space, dynamic memory management\r\n     9 Code optimization, memory hierarchy, caches\r\n     10 Portability, advanced topics\r\n",
      "a_last" : "Barbagli",
      "transfer_syllabus" : "1 Computer Basics\r\n     1.1 numeric systems\r\n     1.2 data representations in computers\r\n     1.3 decimal and encodings(BCD, ASCII, UNICODE)\r\n     1.4 fixed point and floating point\r\n2 CPU Architecture\r\n     2.1 general introductions to microcomputer hierarchy (CPU, bus, memory, hard disk)\r\n     2.2 8086/8088 architecture (ALU, registers, pin function definition)\r\n     2.3 8086/8088 bus and timing sequence (instruction cycles, bus cycle, read/write cycle)\r\n     2.4 8086/8088 memory management (segmentation, physical address, etc.)\r\n3 Assembly Instructions\r\n     3.1 addressing modes and instruction system (addressing modes, stack, basic instructions)\r\n     3.2 macros and preprocessing mechanism (preprocessing, assembling, linking, executable)\r\n     3.3 assembly program design (branching, functions, loops, system calls)\r\n4 Interrupt subsystem and Hardware Interrupt Controller\r\n     4.1 I/O interfaces (I/O data transfer mechanisms, I/O addressing)\r\n     4.2 general interrupt techniques (sources, conditions, handlings of interrupts)\r\n     4.3 8086/8088 interrupt system (interrupt routines, interrupt table, handling)\r\n     4.4 8259A interrupt controller (chip function, pin function assignment, programming interface)\r\n5 Programmable Interface Chips\r\n     5.1 programmable parallel interface chip 8255A\r\n     5.2 programmable counter/timer chip 8253\r\n     5.3 programmable sequential interface chip 8251A\r\n     5.4 applications of interface chips\r\n6 Memory\r\n     6.1 general introduction (categories, CMOS/flash, capacity, address encoding, 74LS138 encoder)\r\n     6.2 memory bus connections\r\n7 32 bit Microcomputer Architectures\r\n     7.1 80286\r\n     7.2 80386\r\n     7.3 80486\r\n     7.4 Pentium\r\n"
   },
   {
      "student_id" : "15294",
      "transfer_description" : "",
      "advisor_id" : "13256",
      "s_school" : "University De Fribourg",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Schneider",
      "a_alias" : "paulo.blikstein",
      "transfer_textbooks" : "Robert Sedgewick, Algorithms in C, Addison-Wesley, 2nd Edition, 2002",
      "a_first" : "Paulo",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Jon Kleinberg and Eva Tardos, Algorithm Design. Addison-Wesley",
      "id" : "131",
      "course_number" : "",
      "stanford_description" : "Design and Analysis of Algorithms ",
      "last_modified" : "0000-00-00",
      "s_first" : "Bertrand",
      "stanford_syllabus" : "Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching. ",
      "a_last" : "Blikstein",
      "transfer_syllabus" : "basic data structures, recursion and complexity; advanced sorting algorithms; advanced search algorithms; graph algorithms; geometric algorithms."
   },
   {
      "student_id" : "13593",
      "transfer_description" : "The purpose of this course is to teach the design of operating systems and other systems. Topics we will cover include concepts of operating systems, networking, database systems and systems programming, including multiple-program systems (processes, interprocess communication, and synchronization), memory allocation (segmentation, paging), resource allocation and scheduling, file systems, basic networking (packet switching, file control, reliability), basic databases (transaction, SQL) security, and privacy.",
      "advisor_id" : "4900",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "ashau",
      "state" : "processed",
      "s_last" : "Shau",
      "a_alias" : "serge.plotkin",
      "transfer_textbooks" : "\"Operating System Concepts 9th Edition\" by Silberschatz, Galvin, and Gagne\r\n\r\n\"The Practice of Programming\" by Kernighan and Pike ",
      "a_first" : "Serge",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Principles of Computer System Design: An Introduction by Jerome H. Saltzer and M. Frans Kaashoek",
      "id" : "96",
      "course_number" : "CS110",
      "stanford_description" : "Principles of Computer Systems\r\nPrinciples and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations.",
      "last_modified" : "0000-00-00",
      "s_first" : "Albert",
      "stanford_syllabus" : "1. Introduction to Computer Systems - Complexity, abstractions\r\n2. Modularization, Naming and Layering - Memory, interpreters, communication links\r\n3. Client-Server Architecture - RPC, indirection, peer to peer\r\n4. Client-Server within a Machine (Virtualization) - Bounded buffers, threads, concurrency, virtual memory\r\n5. Performance - Design approaches, multi-level memories, scheduling\r\n6. Networking - Layers, sockets\r\n7. Protection and Security - Authentication, access control, cryptography\r\n8. Review of systems concepts using case studies",
      "a_last" : "Plotkin",
      "transfer_syllabus" : "Week1:\r\nIntroduction, overview \r\nAbstractions: Services, Structures, Processes, and Threads \r\nConcurrency and Thread Dispatching\r\n\r\nWeek2:\r\nSynchronization: Cooperating Threads, Mutual Exclusion \r\nSemaphores, Condition Variables, Readers/Writers \r\n\r\nWeek3:\r\nSoftware Engineering: Working in Teams\r\nLanguage Support for Synchronization, Deadlock \r\n\r\nWeek4:\r\nCPU Scheduling\r\n\r\nWeek5:\r\nMemory, \r\nProtection: Address Spaces, Address Translation \r\nAddress Translation, Caching, and TLBs \r\n\r\nWeek6:\r\nPage Allocation and Replacement\r\nKernel/User and I/O\r\n\r\nWeek7:\r\nDisks/SSDs,  Filesystems\r\n\r\nWeek8:\r\nFilesystems (cont'd) \r\nKey-Value Store, Networking, Protocols, RPC \r\n\r\nWeek9:\r\nLayering, end to end argument\r\nFlow control, reliability, TCP \r\n\r\nWeek10:\r\nTransactions \r\nTransactions scheduling, 2PL and 2PC \r\n\r\nWeek11:\r\nFault-Tolerant Computing\r\nProtection & Security: Authentication, Cryptographic Mechanisms\r\n\r\nWeek12:\r\nProtection & Security (cont'd): Buffer overflow attacks, DoS attacks\r\nCapstone: Peer-to-peer Systems \r\n\r\nWeek13:\r\nCapstone: Client-Server Systems \r\n\r\n\r\n"
   },
   {
      "student_id" : "13593",
      "transfer_description" : "Machine Structures - The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.",
      "advisor_id" : "4900",
      "s_school" : "UCB",
      "transcript" : "",
      "s_alias" : "ashau",
      "state" : "processed",
      "s_last" : "Shau",
      "a_alias" : "serge.plotkin",
      "transfer_textbooks" : "\"Computer Organization and Design\"\r\nby Patterson and Hennessy\r\n\r\n\"The C\r\nProgramming Language\"\r\nby Kernighan and Ritchie",
      "a_first" : "Serge",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "\"Computer Sys\r\ntems: A Programmer's Perspective\"\r\nby\r\nBryant and O'Hallaron, 2nd edition\r\n\r\n\"The C Programming Language\"\r\nby Kernighan and Ritchie",
      "id" : "95",
      "course_number" : "CS107",
      "stanford_description" : "CS107 is the third course in Stanford's introductory programming sequence. Our CS106 courses provide students with a solid foundation in programming methodology and abstractions and CS107 follows on to build up their programming maturity and expand breadth and depth of experience. The course will work from the C programming language down to the microprocessor to de-mystify the machine. With a complete understanding of how computer systems execute programs and manipulate data, you will become a more effective programmer, especially in dealing with issues of debugging, performance, portability, and robustness. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, performance evaluation and optimization, and memory organization and management.\r\n\r\n\r\nThe class has three lectures every week and a weekly lab designed for hands-on learning and experimentation. There will be significant programming assignments and you can expect to work hard and be challenged by this course. Your effort can really pay off — once you master the machine and advance your programming skills to the next level, you will have powerful mojo to bring to any future project!\r\n",
      "last_modified" : "0000-00-00",
      "s_first" : "Albert",
      "stanford_syllabus" : "Lecture 1: Introductions, Course Overview, Introduction to C\r\n\r\nLecture 2: Introduction to C, brief overview of your dev environment, main, argc, argv\r\n\r\nLecture 3: Introduction to C strings\r\n\r\nLecture 4: More C String Work\r\n\r\nLecture 5: The void *, C generics, function pointers\r\n\r\nLecture 6: More C Generics\r\n\r\nLecture 7: Still on the generic void * train\r\n\r\nLecture 8: Generic ADTs in C, void * wrap up\r\n\r\nLecture 9: Bits and Bytes, Bitwise Operators, Integer Representation and Two's Complement\r\n\r\nLecture 10: Bits and Bytes, Bitwise Operators, Integer Representation and Two's Complement (For Real)\r\n\r\nLecture 11: Bits and Bytes, Bitwise Operators, Integer Representation and Two's Complement (Continued)\r\n\r\nLecture 12: Two's Complement and Floating Point Representations\r\n\r\nLecture 13: Floating Point Wrap-up, Introduction to IA32\r\n\r\nLecture 14: Introduction to IA32, Full Spectrum of all Move Operations\r\n\r\nLecture 15: Arithmetic and Bitwise Operations, Control Structures\r\n\r\nLecture 16: Continuing Arithmetic and Bitwise Operations, Control Structures\r\n\r\nLecture 17: Control Structures, Begin Function Call and Return\r\n\r\nLecture 18: Switch Statements, Function Call and Return Mechanics\r\n\r\nLecture 19: Function Call and Return Wrap, Caller and Callee Saved Register\r\n\r\nLecture 20: Compilation Chain and Tools\r\n\r\nLecture 21: More on Compilation Chain: Compiler, Assembler, Linker\r\n\r\nLecture 22: Dissecting the heap\r\n\r\n",
      "a_last" : "Plotkin",
      "transfer_syllabus" : "Week1:\r\nCourse Intro: Great Ideas in Comp Arch\r\nNumber Representation - twos complement\r\n\r\n\r\nWeek2:\r\nC Intro: Basics\r\nC Intro: Pointers, Arrays, Strings\r\nMIPS Intro\r\n\r\nWeek3:\r\nMIPS lw, sw, Decisions I - control structures\r\nMIPS Decisions II - control structures\r\nMIPS Instruction Format I\r\n\r\nWeek4:\r\nMIPS Instruction Format II \r\nMIPS Procedures I\r\nMIPS Procedures II & Logic Ops\r\n\r\nWeek5\r\nCaches I\r\nCaches II\r\n\r\nWeek6\r\nCaches III\r\nFloating Point Representation\r\nCompilation, Assembly, Linking, Loading\r\n\r\nWeek7\r\nDatacenters and Cloud Computing\r\nMapReduce\r\nData Level Parallelism:\r\nFlynn Taxonomy\r\nIntel SSE SIMD Instructions\r\n\r\nWeek8\r\nIntel SIMD Continued,\r\nThread Level Parallelism\r\nThread Level Parallelism\r\nThread Level Parallelism\r\nOpenMP \r\n\r\nWeek9\r\nIntro to Synch. Digital Systems\r\nState and State Machines\r\nCombinational Logic\r\n\r\nWeek10\r\nCombinational Logic Blocks\r\nSingle Cycle CPU Datapath\r\nSingle Cycle CPU Control\r\n\r\nWeek11\r\nSingle Cycle CPU Control\r\nILP: Pipelining\r\nILP: Pipelining Hazards\r\n\r\nWeek12\r\nILP: Multiple Instruction Issue\r\nVirtual Memory\r\nVirtual Memory\r\n\r\nWeek13:\r\nVirtual Memory\r\nI/O Basics\r\nI/O: Interrupts and Exceptions\r\n\r\nWeek14:\r\nI/O Disk\r\nAmdahl's Law and the\r\nEconomics of Parallelization\r\nEC2 Usage Stat Hoedown\r\nCal Cultural Heritage\r\nPerformance winners\r\nCourse Wrap-up"
   },
   {
      "student_id" : "15313",
      "transfer_description" : "COMSC-312 Algorithms (Mount Holyoke College, Spring 2008)\r\nHow does Mapquest find the best route between two locations? How do computers help to decode the human genome? At the heart of these and other complex computer applications are nontrivial algorithms. While algorithms must be specialized to an application, there are some standard ways of approaching algorithmic problems that tend to be useful in many applications. Among other topics, we will explore graph algorithms, greedy algorithms, divide-and-conquer, dynamic programming, and network flow. We will learn to recognize when to apply each of these strategies as well as to evaluate the expected runtime costs of the algorithms we design.\r\nhttps://www.mtholyoke.edu/sites/default/files/registrar/bulletin/docs/dept_comsc.pdf",
      "advisor_id" : "4901",
      "s_school" : "Mount Holyoke College",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Zhang",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Algorithm Design by Kleinberg and Tardos\r\nhttp://www.amazon.com/Algorithm-Design-Jon-Kleinberg/dp/0321295358",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Jon Kleinberg and Eva Tardos, Algorithm Design. Addison-Wesley",
      "id" : "107",
      "course_number" : "CS161",
      "stanford_description" : "http://www.stanford.edu/class/cs161/",
      "last_modified" : "0000-00-00",
      "s_first" : "Tianjiao",
      "stanford_syllabus" : "http://www.stanford.edu/class/cs161/",
      "a_last" : "Lam",
      "transfer_syllabus" : "https://www.mtholyoke.edu/~blerner/cs312/lectures.html"
   },
   {
      "student_id" : "15313",
      "transfer_description" : "CS324 Computer Architecture (Mount Holyoke College, Fall 2009) The goal of this class is to provide the student with a working knowledge of how computers operate and the general principles that affect their performance. New developments in hardware render current technologies obsolete within one to three years. Rather than focusing on specific technology, we cover the fundamentals that allow your understanding of technology to grow with future developments. You will also gain a better appreciation of the cost/performance trade-offs encountered in designing a computer system. ",
      "advisor_id" : "4901",
      "s_school" : "Mount Holyoke College",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Zhang",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Computer Organization and Design, The Hardware/Software Interface, Fourth Edition \r\nhttp://www.amazon.com/Computer-Organization-Design-Fourth-Architecture/dp/0123744938",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "",
      "id" : "110",
      "course_number" : "CS107",
      "stanford_description" : "https://courseware.stanford.edu/pg/courses/lectures/281000",
      "last_modified" : "0000-00-00",
      "s_first" : "Tianjiao",
      "stanford_syllabus" : "https://courseware.stanford.edu/pg/courses/lectures/281000",
      "a_last" : "Lam",
      "transfer_syllabus" : "http://courses.teresco.org/cs324_f09/syllabus.html\r\nhttp://courses.teresco.org/cs324_f09/schedule.html"
   },
   {
      "student_id" : "15313",
      "transfer_description" : "COMSC-322 Operating Systems (Mount Holyoke College, Spring 2008)\r\n\r\nCS-453 Computer Networks (UMass Amherst, Spring 2009)",
      "advisor_id" : "4901",
      "s_school" : "Mount Holyoke College",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Zhang",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Operating Systems: \r\nComputer Organization and Design, The Hardware/Software Interface, Fourth Edition (Elsevier, ISBN 9780123744937)\r\n\r\nComputer Networks:\r\nComputer Networking: A Top Down Approach Featuring the Internet, J.F. Kurose and K.W. Ross, Addison-Wesley Longman",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Computer Systems: A Programmer's Perspective by Bryant and O'Hallaron\r\n\r\nPrinciples of Computer System Design: An Introduction by Jerome H. Saltzer and M. Frans Kaashoek",
      "id" : "111",
      "course_number" : "CS110",
      "stanford_description" : "Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations.",
      "last_modified" : "0000-00-00",
      "s_first" : "Tianjiao",
      "stanford_syllabus" : "https://class2go.stanford.edu/CS110/Spring2013",
      "a_last" : "Lam",
      "transfer_syllabus" : "Operating Systems:\r\nhttp://courses.teresco.org/cs324_f09/syllabus.html\r\nhttp://courses.teresco.org/cs322_s10/schedule.html\r\nComputer Networks:\r\nhttp://people.cs.umass.edu/~arun/cs453/syllabus.html\r\nhttp://people.cs.umass.edu/~arun/cs453/schedule.html"
   },
   {
      "student_id" : "15313",
      "transfer_description" : "CS401-Formal Language Theory (UMass Amherst, Spring 2009)\r\nhttp://people.cs.umass.edu/~barring/cs401/\r\n\r\nCMPSCI 401 is an advanced undergraduate core course in the theory of computation and will deal with formal language theory (finite automata, regular languages, grammars, and pushdown automata), computability theory, and complexity theory.\r\n\r\n",
      "advisor_id" : "4901",
      "s_school" : "Mount Holyoke College",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Zhang",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Introduction to the Theory Of Computation by Michael Spiser",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "",
      "id" : "102",
      "course_number" : "CS103",
      "stanford_description" : "Mathematics provides many powerful insights for current and future fundamental principles of computer science. Learn how to model problems mathematically, reason about them abstractly and then apply techniques to explore their properties. This broad introduction to mathematical applications will prepare you to move forward and solve today’s most important problems within the computer science field.",
      "last_modified" : "0000-00-00",
      "s_first" : "Tianjiao",
      "stanford_syllabus" : "Formal language theory\r\nProof techniques and applications\r\nPropositional predicate logic\r\nInduction",
      "a_last" : "Lam",
      "transfer_syllabus" : "http://people.cs.umass.edu/~barring/cs401/syllabus.html"
   },
   {
      "student_id" : "15313",
      "transfer_description" : "Math-29 Probability(Fall 2008, Amherst College)\r\nThis course explores the nature of probability and its use in modeling real world phenomena. The course begins with the development of an intuitive feel for probabilistic thinking, based on the simple yet subtle idea of counting. It then evolves toward the rigorous study of discrete and continuous probability spaces, independence, conditional probability, expectation, and variance. Distributions covered include the Bernoulli and Binomial, Hypergeometric, Poisson, Normal, Gamma, Beta, Multinomial, and bivariate Normal. \r\nhttps://www.amherst.edu/academiclife/departments/courses/0809F/MATH/MATH-29-0809F\r\n\r\nMath-30 Mathematical Statistics (Amherst College, Spring 2011)\r\nThis course examines the theory behind common statistical inference procedures including estimation and hypothesis testing. Beginning with exposure to Bayesian inference, the course will cover Maximum Likelihood Estimators, sufficient statistics, sampling distributions, joint distributions, confidence intervals, hypothesis testing and test selection, non-parametric procedures, and linear models. \r\nhttps://www.amherst.edu/academiclife/departments/courses/1011S/MATH/MATH-30-1011S",
      "advisor_id" : "4901",
      "s_school" : "Mount Holyoke College",
      "transcript" : "",
      "s_alias" : "",
      "state" : "pending",
      "s_last" : "Zhang",
      "a_alias" : "monica.lam",
      "transfer_textbooks" : "Probability and Statistics by DeGroot and Shervish (http://www.amazon.com/Probability-Statistics-4th-Morris-DeGroot/dp/0321500466)",
      "a_first" : "Monica",
      "created_on" : "0000-00-00",
      "stanford_textbooks" : "Sheldon Ross, A First Course in Probability (9th Ed.), Pearson Prentice Hall, 2013\r\n",
      "id" : "103",
      "course_number" : "CS109",
      "stanford_description" : "http://www.stanford.edu/class/cs109/\r\n",
      "last_modified" : "0000-00-00",
      "s_first" : "Tianjiao",
      "stanford_syllabus" : "http://www.stanford.edu/class/cs109/handouts/HO02.pdf",
      "a_last" : "Lam",
      "transfer_syllabus" : "Math 29 covered Chapter 1 through Chapter 6 of the text book listed below.\r\n\r\nMath 30 covered Chapter 7 to Chapter 9 of the the text book listed below."
   }
]
